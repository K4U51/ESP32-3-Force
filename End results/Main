#include <Arduino.h>
#include "I2C_Driver.h"
#include "TCA9554PWR.h"
#include "Gyro_QMI8658.h"
#include "BAT_Driver.h"
#include "Display_ST7701.h"
#include "Touch_CST820.h"
#include "LVGL_Driver.h"
#include "ui.h"

// ------------------ Global Variables ------------------
float x = 0, y = 0, z = 0;  // Current accelerometer values

// Peak values
float peak_accel = 0;
float peak_brake = 0;
float peak_left = 0;
float peak_right = 0;

// ------------------ Driver Task ------------------
void Driver_Loop(void *parameter)
{
    while (1)
    {
        QMI8658_Loop();
        BAT_Get_Volts();

        // Copy latest accelerometer values
        x = Accel.x;
        y = Accel.y;
        z = Accel.z;

        // Calculate G-forces
        float accel_g = y / 9.81f;
        float lateral_g = x / 9.81f;

        // Update peaks
        if (accel_g > 0) peak_accel = max(peak_accel, accel_g);
        if (accel_g < 0) peak_brake = max(peak_brake, abs(accel_g));
        if (lateral_g < 0) peak_left = max(peak_left, abs(lateral_g));
        if (lateral_g > 0) peak_right = max(peak_right, lateral_g);

        vTaskDelay(pdMS_TO_TICKS(50));
    }
}

// ------------------ Driver Init ------------------
void Driver_Init()
{
    Serial.println("Initializing Drivers...");

    I2C_Init();
    TCA9554PWR_Init(0x00);

    Set_EXIO(EXIO_PIN8, Low);
    delay(50);
    Set_Backlight(100);

    QMI8658_Init();
    BAT_Init();

    xTaskCreatePinnedToCore(Driver_Loop, "Driver Task", 4096, NULL, 3, NULL, 0);
}

// ------------------ Reset Button Callback ------------------
void reset_peaks_cb(lv_event_t * e)
{
    peak_accel = 0;
    peak_brake = 0;
    peak_left = 0;
    peak_right = 0;
    Serial.println("Peak values reset");
}

// ------------------ UI Update Functions ------------------
void Update_Stats_Screen()
{
    if (!ui_Stats) return;
    if (lv_scr_act() != ui_Stats) return;  // Only update if visible

    if (ui_PeakAccelValue) lv_label_set_text_fmt(ui_PeakAccelValue, "%.2f G", peak_accel);
    if (ui_PeakBrakeValue) lv_label_set_text_fmt(ui_PeakBrakeValue, "%.2f G", peak_brake);
    if (ui_PeakLeftValue) lv_label_set_text_fmt(ui_PeakLeftValue, "%.2f G", peak_left);
    if (ui_PeakRightValue) lv_label_set_text_fmt(ui_PeakRightValue, "%.2f G", peak_right);
}

void Update_Gauge_Screen()
{
    if (!ui_GaugeDot) return;
    if (lv_scr_act() != ui_Gauge) return;  // Only update if visible

    // Center is 240, 240 for 480x480 display
    // Scale: ±1G = ±150 pixels from center
    float xpos = 240 - ((x / 9.81f) * 150);
    float ypos = 240 - ((y / 9.81f) * 150);

    // Clamp to screen bounds
    xpos = constrain(xpos, 20, 460);
    ypos = constrain(ypos, 20, 460);

    lv_obj_set_pos(ui_GaugeDot, (int)xpos, (int)ypos);
}

// ------------------ Setup ------------------
void setup()
{
    Serial.begin(115200);
    delay(1000);
    Serial.println("\n\n=== G-Force Monitor Booting ===");

    // Initialize hardware
    Driver_Init();
    LCD_Init();
    Lvgl_Init();

    // Initialize UI
    Serial.println("Initializing UI...");
    ui_init();

    // Add reset button callback
    if (ui_ResetButton) {
        lv_obj_add_event_cb(ui_ResetButton, reset_peaks_cb, LV_EVENT_CLICKED, NULL);
    }

    Serial.println("=== Setup Complete ===");
}

// ------------------ Main Loop ------------------
void loop()
{
    Update_Stats_Screen();
    Update_Gauge_Screen();
    Lvgl_Loop();
    delay(5);
}
